// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: login_user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoginUserService_LoginUser_FullMethodName = "/proto.LoginUserService/LoginUser"
)

// LoginUserServiceClient is the client API for LoginUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginUserServiceClient interface {
	LoginUser(ctx context.Context, in *LoginForm, opts ...grpc.CallOption) (*LoginResponse, error)
}

type loginUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginUserServiceClient(cc grpc.ClientConnInterface) LoginUserServiceClient {
	return &loginUserServiceClient{cc}
}

func (c *loginUserServiceClient) LoginUser(ctx context.Context, in *LoginForm, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, LoginUserService_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginUserServiceServer is the server API for LoginUserService service.
// All implementations must embed UnimplementedLoginUserServiceServer
// for forward compatibility
type LoginUserServiceServer interface {
	LoginUser(context.Context, *LoginForm) (*LoginResponse, error)
	mustEmbedUnimplementedLoginUserServiceServer()
}

// UnimplementedLoginUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoginUserServiceServer struct {
}

func (UnimplementedLoginUserServiceServer) LoginUser(context.Context, *LoginForm) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedLoginUserServiceServer) mustEmbedUnimplementedLoginUserServiceServer() {}

// UnsafeLoginUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginUserServiceServer will
// result in compilation errors.
type UnsafeLoginUserServiceServer interface {
	mustEmbedUnimplementedLoginUserServiceServer()
}

func RegisterLoginUserServiceServer(s grpc.ServiceRegistrar, srv LoginUserServiceServer) {
	s.RegisterService(&LoginUserService_ServiceDesc, srv)
}

func _LoginUserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginUserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoginUserService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginUserServiceServer).LoginUser(ctx, req.(*LoginForm))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginUserService_ServiceDesc is the grpc.ServiceDesc for LoginUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoginUserService",
	HandlerType: (*LoginUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUser",
			Handler:    _LoginUserService_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "login_user.proto",
}
